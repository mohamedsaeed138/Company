// <auto-generated />
using System;
using Company.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Company.Migrations
{
    [DbContext(typeof(CompanyContext))]
    [Migration("20230823123805_test")]
    partial class test
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Company.Models.Department", b =>
                {
                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Number"));

                    b.Property<DateTime?>("MGRStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ManagerSSN")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Number");

                    b.HasIndex("ManagerSSN");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Company.Models.DepartmentLocation", b =>
                {
                    b.Property<int?>("DNumber")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DNumber", "Location");

                    b.ToTable("DepartmentsLocations");
                });

            modelBuilder.Entity("Company.Models.Dependent", b =>
                {
                    b.Property<int?>("ESSN")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("ESSN", "Name");

                    b.ToTable("Dependents");
                });

            modelBuilder.Entity("Company.Models.Employee", b =>
                {
                    b.Property<int>("SSN")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DNo")
                        .HasColumnType("int");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<int?>("SupervisorSSN")
                        .HasColumnType("int");

                    b.HasKey("SSN");

                    b.HasIndex("DNo");

                    b.HasIndex("SupervisorSSN");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Company.Models.EmployeeProject", b =>
                {
                    b.Property<int?>("ESSN")
                        .HasColumnType("int");

                    b.Property<int?>("PNo")
                        .HasColumnType("int");

                    b.Property<int>("Hours")
                        .HasColumnType("int");

                    b.HasKey("ESSN", "PNo");

                    b.HasIndex("PNo");

                    b.ToTable("EmployeesProjects");
                });

            modelBuilder.Entity("Company.Models.Project", b =>
                {
                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Number"));

                    b.Property<int?>("DNum")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Number");

                    b.HasIndex("DNum");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Company.Models.Department", b =>
                {
                    b.HasOne("Company.Models.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerSSN");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Company.Models.DepartmentLocation", b =>
                {
                    b.HasOne("Company.Models.Department", "Department")
                        .WithMany("Locations")
                        .HasForeignKey("DNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Company.Models.Dependent", b =>
                {
                    b.HasOne("Company.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("ESSN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Company.Models.Employee", b =>
                {
                    b.HasOne("Company.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DNo");

                    b.HasOne("Company.Models.Employee", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorSSN");

                    b.Navigation("Department");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("Company.Models.EmployeeProject", b =>
                {
                    b.HasOne("Company.Models.Employee", "Employee")
                        .WithMany("Projects")
                        .HasForeignKey("ESSN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Company.Models.Project", "Project")
                        .WithMany("Employees")
                        .HasForeignKey("PNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Company.Models.Project", b =>
                {
                    b.HasOne("Company.Models.Department", "Department")
                        .WithMany("Projects")
                        .HasForeignKey("DNum");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Company.Models.Department", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Locations");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Company.Models.Employee", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Company.Models.Project", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
